#include "bullet.h"
#include <QTimer>
#include <QDebug>
#include <QList>
#include <enemy.h>
#include <viewgame.h>

extern ViewGame* vgame;  // объявили использование указателя на внешнюю глобальную переменную класса ViewGame (для того чтобы через нее можно было добраться до переменных и методов класса Game

Bullet::Bullet()
{
    //setRect(0,0,10,50);     // Создаем размер для пули (если требуется создать прямоугольник)

    setPixmap(QPixmap(":/images/Rocket.png").scaled(10,50,Qt::IgnoreAspectRatio));  //Зададим изображение для выстрела (ракета) и при помощи метода scaled изменим размер на нужные параметры

    QTimer *timer = new QTimer(); //Создали объект типа QTimer для  того что бы подсоединить к нему слот функцию move()
    connect(timer,SIGNAL(timeout()),this,SLOT(move()));   //Соединяем сиглал от таймера со слотом move этого объекта
    timer->start(50);          //Устанавливаем счетчик для объекта timer (каждые 50 милесекунд будет выполянться метод move)
}
void Bullet::move()     //Метод смещения пули вверх
{
    //Проверяем на столкновении пули и врага, удаление оба объекта при столкновении
    QList<QGraphicsItem *> colliding_items = collidingItems();    //Создадим список "Сталкивающиеся предметы" (из указателей на сталкивающиеся объеткы) и при помощи функции collidingItems()(возвращает указатель на тот объект с которым произошло столкновение, в нашем случае на того врага с которым столкнулась эта пуля) заполним его
    for (int i = 0;i < colliding_items.size(); ++i)
    {
        if(typeid(*(colliding_items[i])) == typeid(Enemy))      //Если в списке есть указатель на объект типа враг то удаляем его, т.к. он был занесен в список ранее, значит пуля столкнулась с данных объектом
        {
               vgame->scene->score->increase();         //Т.к. объявили указатель на внешнюю глобальную переменную(указатель) game, то можно через него вызвать метод increase() класса Score

               scene()->removeItem(colliding_items[i]);         //Удаляем врага из объекта scene
               scene()->removeItem(this);                       //Удаляем пулю столкнувшиюся с врагом из объекта scene

               delete colliding_items[i];                       //Удаляем сам объект врага из пямяти
               delete this;                                     //Удаляем пулю (объект) столкнувшиюся с врагом из памяти
               return;                                          //После удаления нужно выйти из функции дабы не продолжать выполнение последующего кода
        }
    }
    setPos(x(),y()-10);
    if ((pos().y() + pixmap().height()) < 0)     // Если позиция по координате y стала меньше 0 в ситеме координат scene то удалим этот объект из scene
    {
        scene()->removeItem(this);  // Удаляем объект из объекта scene класса QGraphicsScene
        //qDebug() << "Пуля удалена";
        delete this;                // Удаляем сам объект пуля из памяти
    }

}


